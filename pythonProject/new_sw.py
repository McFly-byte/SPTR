# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'new_sw.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5.QtCore import QUrl, QObject, pyqtSignal
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5 import QtCore, QtGui, QtWidgets
import pyqtgraph as pg
from PyQt5.QtWidgets import QMessageBox, QMainWindow, QWidget

import cos
import data_process
import qiangdu

# ### 自定义信号槽，可实现带参槽函数
# 信号对象
import sankey


class QTypeSignal(QObject):
	# 定义一个信号
	sendmsg = pyqtSignal(object,object)

	def __init__(self):
		super(QTypeSignal, self).__init__()

	# def run(self):
	# 	# 发射信号
	# 	self.sendmsg.emit([1,2,3,4],[11,12,12,34])
X = []
Y = []
# 槽对象
class QTypeSlot(QObject):
	def __init__(self):
		super(QTypeSlot, self).__init__()

	# 槽对象里的槽函数
	def get(self, x=[], y=[]):
		global X,Y
		X = x
		Y = y


class Ui_MainWindow(object):
    x,y = [],[]
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1600, 898)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 1600, 900))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setObjectName("tabWidget")
        # ## 数据处理 lda 困惑度
        self.tab_1 = QtWidgets.QWidget()
        self.tab_1.setObjectName("tab_1")
        self.perplexity_button = QtWidgets.QPushButton(self.tab_1)
        self.perplexity_button.setGeometry(QtCore.QRect(1440, 760, 185, 30))
        self.perplexity_button.setObjectName("perplexity_button")
        self.lda_button = QtWidgets.QPushButton(self.tab_1)
        self.lda_button.setGeometry(QtCore.QRect(1210, 760, 185, 30))
        self.lda_button.setObjectName("lda_button")
        self.data_process_button = QtWidgets.QPushButton(self.tab_1)
        self.data_process_button.setGeometry(QtCore.QRect(980, 760, 185, 30))
        self.data_process_button.setObjectName("data_process_button")
        # 创建web窗体
        self.browser = QWebEngineView(self.tab_1)
        self.browser.setGeometry(QtCore.QRect(20, 30, 890, 780))
        self.browser.setObjectName("web_browser")
        self.lda_button.clicked.connect(self.show_web)
        # pyqtgraph
        self.pw1 = pg.PlotWidget(self.tab_1)
        self.pw1.setGeometry(QtCore.QRect(930, 30, 631, 701))
        self.pw1.setObjectName("pw1")
        # self.label_2 = QtWidgets.QLabel(self.tab_1)
        # self.label_2.setGeometry(QtCore.QRect(930, 30, 631, 701))
        # self.label_2.setObjectName("label_2")
        self.data_process_button.clicked.connect(self.process_1)
        self.perplexity_button.clicked.connect(self.show_perplexity)
        self.tabWidget.addTab(self.tab_1, "")

        # ## 主题强度
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.qiangdu_button = QtWidgets.QPushButton(self.tab_2)
        self.qiangdu_button.setGeometry(QtCore.QRect(90, 740, 171, 41))
        self.qiangdu_button.setObjectName("qiangdu_button")
        self.label_3 = QtWidgets.QLabel(self.tab_2)
        self.label_3.setGeometry(QtCore.QRect(100, 80, 1391, 601))
        self.label_3.setObjectName("label_3")
        self.qiangdu_button.clicked.connect(self.process_2)
        self.tabWidget.addTab(self.tab_2, "")

        # ## 余弦相似度
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.cos_button = QtWidgets.QPushButton(self.tab_3)
        self.cos_button.setGeometry(QtCore.QRect(60, 730, 171, 41))
        self.cos_button.setObjectName("cos_button")
        self.cos_button.clicked.connect(self.process_3)
        self.tabWidget.addTab(self.tab_3, "")

        # ## 桑基图
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.sankey_button = QtWidgets.QPushButton(self.tab_4)
        self.sankey_button.setGeometry(QtCore.QRect(240, 740, 121, 31))
        self.sankey_button.setObjectName("sankey_button")
        # self.label_4 = QtWidgets.QLabel(self.tab_4)
        # self.label_4.setGeometry(QtCore.QRect(40, 40, 1501, 651))
        # self.label_4.setObjectName("label_4")
        self.browser_2 = QWebEngineView(self.tab_4)
        self.browser_2.setGeometry(QtCore.QRect(40, 40, 1500, 650))
        self.browser_2.setObjectName("web_browser_2")
        self.sankey_button.clicked.connect( self.process_4 )
        self.tabWidget.addTab(self.tab_4, "")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1600, 26))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menu.menuAction())
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(3)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.perplexity_button.setText(_translate("MainWindow", "困惑度曲线"))
        self.lda_button.setText(_translate("MainWindow", "LDA主题模型训练"))
        self.data_process_button.setText(_translate("MainWindow", "数据预处理"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_1), _translate("MainWindow", "Tab 1"))
        self.qiangdu_button.setText(_translate("MainWindow", "主题强度"))
        self.label_3.setText(_translate("MainWindow", "强度"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Tab 2"))
        self.cos_button.setText(_translate("MainWindow", "主题余弦相似度"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Tab 3"))
        self.sankey_button.setText(_translate("MainWindow", "桑基图"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("MainWindow", "Tab 4"))
        self.menu.setTitle(_translate("MainWindow", "开始"))

    # LDA 困惑度
    def process_1(self):
        # TODO 接收参数
        user = 'root'
        pwd = 'Xy213592'
        db = 'patent_for_test'
        # TODO time_window 中的 表名、筛选依据的属性名（‘时间’）、起止点（2020、2021） 要额外设计控件接收
        time_window = "SELECT * FROM `专利31000_for_test` WHERE `时间` >= 2020 AND `时间` <= 2021 "

        self.x,self.y = data_process.process_1(user,pwd,db,time_window)
        print( self.y )
        print( self.x )

    # lda可视化
    def show_web(self):
        # FIXME 打包后可能要出事，先这么写着
        try:
            self.browser.load(QUrl("file:///D:/MyRepository/sptr/pythonProject/lda_pass30.html"))
            self.browser.show()
            print( "perplexity")
        except:
            QMessageBox.about(None, "提示", "无可用资源")

    # 困惑度曲线
    def show_perplexity(self):
        print( "self.y" )
        print( self.y )
        if( self.y == [] ):
            QMessageBox.about(None, "提示", "无数据")
        else :
            # TODO 鼠标移动显示坐标
            # win = pg.GraphicsLayoutWidget(show=True, title="困惑度曲线")
            # win.resize(1000, 600)
            # Enable antialiasing for prettier plots
            # pg.setConfigOption('background', 'w')
            # pg.setConfigOptions(antialias=True)
            # p = win.addPlot(title="困惑度曲线")
            self.pw1.plot(self.y, pen=(255, 0, 0), name="curve")
            # pg.exec()

    # 主题强度
    def process_2(self):
        # TODO 补齐参数
        print( "qiangdu " )
        user = 'root'
        pwd = 'Xy213592'
        db = 'patent_for_test'
        tb = "专利31000_for_test"
        attr = "时间"
        year1, year2, year3, year4 = 2000, 2022, 2000, 2021
        dur = 2
        n_topics = 27
        qiangdu.process_2(user, pwd, db, tb, attr, year1, year2, dur, year3, year4, n_topics)

    # 余弦相似度
    def process_3(self):
        user = 'root'
        pwd = 'Xy213592'
        db = 'patent_for_test'
        tb = "专利31000_test_2"
        attr = "时间"
        yr3, yr1, yr2 = 2008, 2009, 2011
        cos.cos_similarity(user,pwd,db,tb,attr,yr1,yr2,yr3)

    def process_4(self):
        sankey.sankey_diagram()
        self.show_web_2()

    def show_web_2(self):
        # FIXME 打包后可能要出事，先这么写着
        try:
            self.browser_2.load(QUrl("file:///D:/MyRepository/sptr/pythonProject/桑基图.html"))
            self.browser_2.show()
            print("perplexity")
        except:
            QMessageBox.about(None, "提示", "无可用资源")